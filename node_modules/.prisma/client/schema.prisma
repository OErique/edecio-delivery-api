generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id            Int         @id @default(autoincrement()) @map("id")
  nome          String      @map("nome")
  email         String      @unique @map("email")
  senha         String      @map("senha")
  papel         Papel       @default(USUARIO) @map("papel")
  pedidos       Pedido[]
  avaliacoes    Avaliacao[]
  criado_em     DateTime    @default(now()) @map("criado_em")
  atualizado_em DateTime    @updatedAt @map("atualizado_em")

  @@map("usuario")
}

enum Papel {
  USUARIO @map("USUARIO")
  ADMIN   @map("ADMIN")

  @@map("papel")
}

model Restaurante {
  id            Int            @id @default(autoincrement()) @map("id")
  nome          String         @unique @map("nome")
  imagem_url    String?        @map("imagem_url")
  categoria     String?        @map("categoria")
  itens         ItemCardapio[]
  pedidos       Pedido[]
  avaliacoes    Avaliacao[]
  criado_em     DateTime       @default(now()) @map("criado_em")
  atualizado_em DateTime       @updatedAt @map("atualizado_em")

  @@map("restaurante")
}

model ItemCardapio {
  id             Int          @id @default(autoincrement()) @map("id")
  destaque       Boolean      @default(false) @map("destaque")
  nome           String       @map("nome")
  descricao      String?      @map("descricao")
  preco_centavos Int          @map("preco_centavos")
  imagem_url     String?      @map("imagem_url")
  restaurante_id Int          @map("restaurante_id")
  restaurante    Restaurante  @relation(fields: [restaurante_id], references: [id], onDelete: Cascade)
  itens_pedido   ItemPedido[]
  criado_em      DateTime     @default(now()) @map("criado_em")
  atualizado_em  DateTime     @updatedAt @map("atualizado_em")

  @@map("item")
}

model Pedido {
  id             Int          @id @default(autoincrement()) @map("id")
  status         StatusPedido @default(PENDENTE) @map("status")
  usuario_id     Int          @map("usuario_id")
  usuario        Usuario      @relation(fields: [usuario_id], references: [id], onDelete: Cascade)
  restaurante_id Int          @map("restaurante_id")
  restaurante    Restaurante  @relation(fields: [restaurante_id], references: [id], onDelete: Cascade)
  itens          ItemPedido[]
  total_centavos Int          @map("total_centavos")
  endereco       String       @map("endereco")
  avaliacao      Avaliacao?
  criado_em      DateTime     @default(now()) @map("criado_em")
  atualizado_em  DateTime     @updatedAt @map("atualizado_em")

  @@map("pedido")
}

model ItemPedido {
  id             Int          @id @default(autoincrement()) @map("id")
  pedido_id      Int          @map("pedido_id")
  item_id        Int          @map("item_id")
  quantidade     Int          @map("quantidade")
  preco_centavos Int          @map("preco_centavos")
  item           ItemCardapio @relation(fields: [item_id], references: [id], onDelete: Cascade)
  pedido         Pedido       @relation(fields: [pedido_id], references: [id], onDelete: Cascade)

  @@map("item_pedido")
}

model Avaliacao {
  id             Int         @id @default(autoincrement()) @map("id")
  nota           Int         @map("nota")
  comentario     String?     @map("comentario")
  pedido_id      Int         @unique @map("pedido_id")
  pedido         Pedido      @relation(fields: [pedido_id], references: [id], onDelete: Cascade)
  usuario_id     Int         @map("usuario_id")
  usuario        Usuario     @relation(fields: [usuario_id], references: [id], onDelete: Cascade)
  restaurante_id Int         @map("restaurante_id")
  restaurante    Restaurante @relation(fields: [restaurante_id], references: [id], onDelete: Cascade)
  criado_em      DateTime    @default(now()) @map("criado_em")
  atualizado_em  DateTime    @updatedAt @map("atualizado_em")

  @@map("avaliacao")
}

enum StatusPedido {
  PENDENTE   @map("PENDENTE")
  CONFIRMADO @map("CONFIRMADO")
  PREPARANDO @map("PREPARANDO")
  A_CAMINHO  @map("A_CAMINHO")
  ENTREGUE   @map("ENTREGUE")
  CANCELADO  @map("CANCELADO")

  @@map("status_pedido")
}
